config= {'b_value': 5.0, 'c_value': 1.0, 'd_value': 0.0, 'n_agents': 2, 'algorithm': 'dqn', 'wandb_mode': 'offline', 'num_game_iterations': 10, 'n_epochs': 2000, 'obs_size': 4, 'action_size': 2, 'random_baseline': False, 'embedding_dim': 1, 'binary_reputation': 1, 'other_reputation_threshold': 0.4, 'cooperation_threshold': 0.4, 'optuna_': 0, 'device': 'cpu', 'reputation_in_reward': 0, 'memory_size': 500, 'n_hidden_act': 2, 'hidden_size_act': 16, 'batch_size': 5, 'lr_actor': 0.01, 'decayRate': 0.999}
DD= tensor(1.)
Dc= tensor(6.)
Cd= tensor(0.)
CC= tensor(5.)
mv= tensor(6.)
mat= tensor([[1., 6.],
        [0., 5.]])
norm mat= tensor([[0.1667, 1.0000],
        [0.0000, 0.8333]])
is_dummy= [0, 0]
==========>Epoch= 0
epsilon= 0.5
actions= {'agent_1': tensor(1), 'agent_0': tensor(0)}
frame= 0
frame= 0
actions= {'agent_1': tensor(0), 'agent_0': tensor(0)}
frame= 0
frame= 0
actions= {'agent_1': tensor(1), 'agent_0': tensor(1)}
frame= 0
frame= 0
actions= {'agent_1': tensor(1), 'agent_0': tensor(0)}
frame= 0
frame= 0
actions= {'agent_1': tensor(0), 'agent_0': tensor(0)}
frame= 0
frame= 0
actions= {'agent_1': tensor(1), 'agent_0': tensor(1)}
frame= 0
frame= 0
actions= {'agent_1': tensor(0), 'agent_0': tensor(1)}
frame= 0
frame= 0
actions= {'agent_1': tensor(1), 'agent_0': tensor(1)}
frame= 0
frame= 0
actions= {'agent_1': tensor(1), 'agent_0': tensor(0)}
frame= 0
frame= 0
actions= {'agent_1': tensor(0), 'agent_0': tensor(1)}
frame= 0
frame= 0
Epoch : 0 	 Measure: 0
==========>Epoch= 1
epsilon= 0.49950034986670416
actions= {'agent_0': tensor(1), 'agent_1': tensor(0)}
frame= 0
frame= 0
actions= {'agent_0': tensor(1), 'agent_1': tensor(0)}
frame= 1
frame= 1
actions= {'agent_0': tensor(1), 'agent_1': tensor(1)}
frame= 2
frame= 2
actions= {'agent_0': tensor(1), 'agent_1': tensor(0)}
frame= 3
frame= 3
actions= {'agent_0': tensor(1), 'agent_1': tensor(0)}
frame= 4
frame= 4
actions= {'agent_0': tensor(1), 'agent_1': tensor(1)}
frame= 5
frame= 5
actions= {'agent_0': tensor(1), 'agent_1': tensor(0)}
frame= 6
frame= 6
actions= {'agent_0': tensor(0), 'agent_1': tensor(0)}
frame= 7
frame= 7
actions= {'agent_0': tensor(0), 'agent_1': tensor(1)}
frame= 8
frame= 8
actions= {'agent_0': tensor(1), 'agent_1': tensor(0)}
frame= 9
frame= 9
==========>Epoch= 2
epsilon= 0.4990011991337998
actions= {'agent_1': tensor(0), 'agent_0': tensor(1)}
frame= 0
frame= 0
actions= {'agent_1': tensor(1), 'agent_0': tensor(0)}
frame= 2
frame= 2
actions= {'agent_1': tensor(0), 'agent_0': tensor(0)}
frame= 4
frame= 4
actions= {'agent_1': tensor(0), 'agent_0': tensor(0)}
frame= 6
frame= 6
actions= {'agent_1': tensor(0), 'agent_0': tensor(0)}
frame= 8
frame= 8
actions= {'agent_1': tensor(1), 'agent_0': tensor(1)}
frame= 10
===>UPDATING!
batch state= (tensor([0., 1., 0., 0.]), tensor([1., 1., 1., 1.]), tensor([0., 0., 0., 0.]), tensor([1., 0., 1., 0.]), tensor([0., 1., 1., 0.])) <class 'tuple'>
batch state= tensor([[0., 1., 0., 0.],
        [1., 1., 1., 1.],
        [0., 0., 0., 0.],
        [1., 0., 1., 0.],
        [0., 1., 1., 0.]])
batch action= tensor([[0],
        [0],
        [0],
        [1],
        [1]])
batch_reward= tensor([[7.],
        [1.],
        [7.],
        [1.],
        [5.]])
non_final_mask= tensor([1, 1, 1, 1, 1], dtype=torch.uint8)
non_final_next_states= None
compute loss
empty_next_state_values= True
current q vals= tensor([0, 0, 1, 1, 1])
current q shape= torch.Size([5])
max_next_q_values= tensor([[0.],
        [0.],
        [0.],
        [0.],
        [0.]])
Traceback (most recent call last):
  File "caller.py", line 61, in <module>
    train_dqn(args)
  File "/home/nicole/marl-emecom/src/experiments_anastassacos/train_dqn.py", line 207, in train_dqn
    objective(args, repo_name)
  File "/home/nicole/marl-emecom/src/experiments_anastassacos/train_dqn.py", line 110, in objective
    agent.update(states[ag_idx], actions[ag_idx], rewards[ag_idx], next_states[ag_idx], i*epoch)
  File "/home/nicole/marl-emecom/src/algos/anast/DQN_anast.py", line 159, in update
    loss.backward()
  File "/home/nicole/marl-emecom/env1/lib/python3.8/site-packages/torch/_tensor.py", line 363, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)
  File "/home/nicole/marl-emecom/env1/lib/python3.8/site-packages/torch/autograd/__init__.py", line 173, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn